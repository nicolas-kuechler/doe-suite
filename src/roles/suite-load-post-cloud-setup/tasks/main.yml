---

# This role finalizes the loading of the suite.
# After creating the AWS environment, now we also have connection information
# for the different hosts in a multi-instance experiment.
#
# As a first step, we extend the suite design (we create a list of run configurations).
# In each entry, the factors receive their level and we also resolve the start commands in $CMD$.
#
# Afterward, for a new suite, we initialize the job id lists:
# All jobs of the experiment are placed in the `exp_job_ids` list.
#
# Further variables that are important:
# - `exp_runs_ext` contains the runs of an experiment (is set on all controller hosts for an experiment)
# - `exp_host_lst` lists all instances belonging to an experiment (e.g., clients and servers).
#   This variable can be used to pass the ip address (private_dns_name) of an instance on the command line
#   for an experiment starting command in $CMD$.
#
#
# Finally, we store the experiment state on the localhost in the corresponding results directory.

- assert:
    that:
    - inventory_hostname in groups['is_controller_yes']
    - hostvars['localhost'].my_suite_design is defined
    - hostvars['localhost'].suite_hosts_lst is defined
    - exp_name is defined


##########################################
# Extend the suite design
##########################################

- set_fact:
    exp_specific_vars: "{{ hostvars['localhost'].suite_hosts_lst | to_exp_specific_vars(hostvars['localhost'].my_suite_design.keys(), hostvars | to_json | from_json ) }}"

- name: expand experiment suite design + replace variables
  suite_design_extend:
    suite_design_path: "{{ hostvars['localhost'].suite_design_dir }}/"
    exp_specific_vars: "{{ exp_specific_vars }}" # dict {exp_name: {k:v}}
    ext_design_file_output: "{{ hostvars['localhost'].suite_design_dir }}/suite_design_ext.yml"
  register: my_suite_design_ext
  # my_suite_design_ext.design: {<exp_name1>: [{<run_config1>}, {<run_config2>}, ...], }
  delegate_to: localhost
  # run_once: True -> would like to do this but for strategy free not supported and it's not a relevant overhead



##########################################
# Setup Job Ids
##########################################

- name: Setup job ids for `new` on each controller host
  set_fact:
    exp_job_ids: "{{ my_job_ids }}"
    exp_job_ids_unfinished: "{{ my_job_ids }}"
    exp_job_ids_pending: "{{ my_job_ids }}"
    exp_job_ids_queued: []
    exp_job_ids_running: []
    exp_job_ids_finished: []
  vars:
    # produces a list of jobs (each entry contains info on suite, experiment, run, and repetition)
    # exp_job_ids = [{"suite": X, "suite_id": X, "exp_name": X, "exp_run": X, "exp_run_rep": X, }, ...]
    my_job_ids: "{{ [suite]
                    | product([suite_id])
                    | product([exp_name])
                    | product(range(0, (my_suite_design_ext['designs'][exp_name] | length), 1))
                    | product(range(0, (hostvars['localhost'].my_suite_design[exp_name].n_repetitions | int), 1))
                    | map('tuple2flat2dict', ['suite', 'suite_id', 'exp_name', 'exp_run', 'exp_run_rep'])
                    | list }}"
  when: id == 'new'


- name: cleanup variables and set variables for experiment
  set_fact:
    my_suite_design_ext: ''
    exp_runs_ext: "{{ my_suite_design_ext['designs'][exp_name] }}"
    exp_host_lst: "{{ suite_hosts_d[exp_name] }}"
  vars:
    suite_hosts_d: "{{ hostvars['localhost'].suite_hosts_lst | collect_items2dict(key_name='exp_name', multiset=True) }}"

- name: Setup job ids (state) for existing suites
  include_role:
    name: experiment-state
  vars:
    expstate: 'load'
  when: id != 'new'

- name: Save job_ids (state) on each controller
  include_role:
    name: experiment-state
  vars:
    expstate: 'save'
  when: id == 'new'
