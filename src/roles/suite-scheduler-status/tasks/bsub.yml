---

# Since bjobs runs multiple jobs in parallel, we ignore `job_id_to_wait_for`.
# This script waits for any of the active jobs to complete and then sets job_id_to_wait_for as one of the completed jobs.

- assert:
    that:
      - exp_name is defined

#- name: Debug what we have
#  debug:
#    msg: "{{ exp_job_ids_queued + exp_job_ids_running }}"
#
#- name: Debug wait for
#  debug:
#    msg: "{{ job_id_to_wait_for }}"

- name: Debug bjobs
  bjobs_info:
  register: bjobs_result
- name: debug bjobs
  debug:
    msg: "{{ bjobs_result }}"

- name: Store job_id that system wants us to wait for
  set_fact:
    system_job_id: "{{ job_id_to_wait_for }}"

- name: Get bjobs
  bjobs_info:
  register: bjobs_result
  until: (exp_job_ids_queued + exp_job_ids_running) | bsub_jobs_finished(bjobs_result.tasks) | length
  retries: "{{ job_n_tries }}"
  delay: "{{ job_check_wait_time }}"

#- name: debug bjobs
#  debug:
#    msg: "{{ bjobs_result }}"

# Quick hack to be compatible with what experiment-job expects:
#   Set job_id_to_wait_for to the jsonified version of job_info
- set_fact:
    job_id_to_wait_for: "{{ (exp_job_ids_queued + exp_job_ids_running) | bsub_jobs_finished(bjobs_result.tasks) }}"

#- name: debug wait for
#  debug:
#    msg: "{{ job_id_to_wait_for }}"

- name: Override the job id to wait until finished + update state
  set_fact:
    exp_job_ids_queued: "{{ (exp_job_ids_queued + [system_job_id]) | difference([job_id_to_wait_for]) }}"
    exp_job_ids_running: "{{ [job_id_to_wait_for] }}"