ETL Design
==========

Extractors
----------
The `Extractor` stage processes files generated by experiment jobs and creates a Pandas data frame.
Each file needs to be assigned to exactly one `Extractor` by setting the `file_regex` field.
The provided extractors provide reasonable defaults that can be adjusted for specific use cases.

.. automodule:: doespy.extractors
    :members:
    :exclude-members: file_regex_default, extract


Transformers
------------
The `Transformer` stage manipulates the raw Pandas results data frame created by the `Extractor` stage.
There are two different syntax available:

- The stage can directly invoke functions defined on the data frame, see :py:class:`Pandas.DataFrameFunction`.

- The stage can invoke custom Transformer Classes, e.g., :py:class:`doespy.transformers.ConditionalTransformer`.

.. py:module:: Pandas
.. py:class:: DataFrameFunction
    Can directly call all functions defined on pandas data frames: https://pandas.pydata.org/docs/reference/frame.html
    The syntax is different from regular transformers, use ``df.*`` and replace ``*`` with the function name.
    The dictionary under ``df.*`` can be used to pass named arguments of the selected function.

    :param \*\*args: Pass argument ot the function selected with ``df.*``

    .. code-block:: yaml
       :caption: Example ETL Pipeline Design
        $ETL$:
            transformers:
                # remove all cols except
                - df.filter: {items: ["exp_name", "x", "y"]}
                # add column to df
                - df.eval: {expr: "color = 'black'"}
.. automodule:: doespy.transformers
    :members:
    :exclude-members: transform, FilterColumnTransformer



Loaders
-------
The `Loader` stage can be used to create visualizations, plots, and other files based on the data frame from the `Transformer` stage.

.. COMMENT
    .. automodule:: doespy.loaders
        :members:
        :exclude-members: load, PlotLoader