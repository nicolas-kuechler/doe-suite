---

##########################################################################
#   Load Experiment State and Setup AWS                                  #
##########################################################################
- name: Load Experiment State and Setup AWS
  hosts: localhost

  tasks:
  - name: Read the experiment configuration
    include_vars: experiments/designs/{{ exp_suite }}.yml

  - name: Preserve initial variable for all experiments
    set_fact:
        redefine_exp_id: "{{ exp_id is not defined }}"

  - name: Do load and setup for all experiments
    include_tasks:
      file: experiment_load.yml
    vars:
      exp_name: "{{ (item | dict2items | first).key }}"
      experiment: "{{ (item | dict2items | first).value }}"
      exp_cnt: "{{ ansible_loop.index0 }}"
    loop: "{{ experiments }}"
    loop_control:
      extended: yes

  - name: Accumulate hosts in the same group among all host types
    set_fact:
      host_types: "{{ host_types
                     | default({})
                     | combine({ 'all':
                         {
                           host_type.key:
                             { 'n': (host_types | json_query('*.' + host_type.key + '.n') | sum),
                               'n_max': (host_types | json_query('*.' + host_type.key + '.n_max') | sum)
                             }
                         }
                      }, recursive=True)
                   }}"
    with_items:
      - "{{ state.host_types | dict2items | list }}"
    loop_control:
      loop_var: host_type

  - debug:
      msg: "Setup AWS..."
    tags: [print_action]
    when: id == 'new'

  - name: Setup AWS VPC
    include_role:
      name: experiment-aws-vpc
    vars:
      do_create_vpc: "{{ (host_types['all'] | json_query('*.n_max') | sum) > 0 }}"

  - name: Setup AWS EC2 instances
    include_role:
      name: experiment-aws
    with_items:
      - "{{ host_types['all'] | dict2items }}"
    vars:
      host_group_name: "{{ host_type.key }}"
      host_values: "{{ host_type.value }}"
    loop_control:
      loop_var: host_type
    when: id == 'new' # only change AWS if it is a new experiment

  - debug:
      var: groups

  - debug:
      msg: "Setup Host Machines..."
    tags: [print_action]

##########################################################################
#   Setup Machines (Common, Clients Only, Servers Only)                  #
##########################################################################

- name: Setup registered host types
  hosts: "{{ [ 'tag_name_' + hostvars['localhost']['prj_id'] + '_' ]
             | product( (hostvars['localhost']['host_types']['all'].keys() | list) )
             | map('join')
             | list }}"
  tasks:
  - debug:
      msg: "{{ inventory_hostname }}"
  # - debug:
  #     var: groups
  # - name:
  #   include_role:
  #     name: setup-common
    when: id == 'new' # only setup if it is a new experiment

  # TODO: remove
  - fail:
      msg: "Stopping..."

# - name: Setup machines with common setup
#   hosts: "{{ hostvars['localhost'].exp_client.host_group }}:{{ hostvars['localhost'].exp_server.host_group }}"
#   tasks:
#   - debug:
#       var: groups
#   - name:
#     include_role:
#       name: setup-common
#     when: id == 'new' # only setup if it is a new experiment
#
# - name: Setup "server" machines with server-specific setup
#   hosts: "{{ hostvars['localhost'].exp_server.host_group }}"
#   tasks:
#   - debug:
#       var: groups
#   - name:
#     include_role:
#       name: setup-server
#     when: id == 'new' # only setup if it is a new experiment
#
# - name: Setup "client" machines with client-specific setup
#   hosts: "{{ hostvars['localhost'].exp_client.host_group }}"
#   tasks:
#   - debug:
#       var: groups
#   - name:
#     include_role:
#       name: setup-client
#     when: id == 'new' # only setup if it is a new experiment


##########################################################################
#   Run Experiment Jobs                                                  #
##########################################################################

- name: Run and monitor experiment jobs
  # variables 'exp_n_tries' and 'exp_check_wait_time' control how long this runs
  hosts: localhost
  tasks:
  - debug:
      msg: "Running Experiment Jobs..."
    tags: [print_action]

  - name: Try to sequentially run an experiment and wait until it's finished
    include_role:
      name: experiment-job
    when: exp_job_ids_unfinished | length > 0  # there are some unfinished jobs left
    loop: "{{ range(0, exp_n_tries, 1)|list }}"


##########################################################################
#   Cleanup AWS (terminate instances, remove vpc)                        #
##########################################################################

- name: Cleanup and Utility
  hosts: localhost
  tasks:

  - debug:
      msg: "Cleanup AWS..."
    tags: [print_action]
    when: awsclean | default(true) | bool  and exp_job_ids_unfinished | length == 0

  # TODO: test this
  - name: Cleanup AWS
    include_role:
      name: experimet-clear
    when: awsclean | default(true) | bool  and exp_job_ids_unfinished | length == 0

  - name: Output the run id of this experiment for convenience
    debug:
      var: exp_id
    when: id == 'new'

  # TODO: cleanup all experiments
  - debug:
      msg: "Finished Experiment: {{ exp_name }} (id={{ exp_id }})   #runs={{ exp_runs_ext | length }} #reps={{ n_repetitions }}  => #jobs={{ exp_job_ids | length }}"
    tags: [print_action]
    when: exp_job_ids_unfinished | length == 0
