---

##########################################################################
#   Load Experiment State and Setup AWS                                  #
##########################################################################
- name: Load Experiment State and Setup AWS
  hosts: localhost

  tasks:
  - name: Read the experiment configuration
    include_vars: experiments/designs/{{ exp_suite }}.yml

  - name: Preserve initial variable for all experiments
    set_fact:
        redefine_exp_id: "{{ exp_id is not defined }}"

  - name: Do load and setup for all experiments
    include_tasks:
      file: experiment_load_setup.yml
    vars:
      exp_name: "{{ (item | dict2items | first).key }}"
      experiment: "{{ (item | dict2items | first).value }}"
    loop: "{{ experiments }}"

  - debug:
      msg: "{{ exp_facts }}"

  # TODO: remove
  - fail:
      msg: "Stopping..."

##########################################################################
#   Setup Machines (Common, Clients Only, Servers Only)                  #
##########################################################################

- name: Setup machines with common setup
  hosts: "{{ hostvars['localhost'].exp_client.host_group }}:{{ hostvars['localhost'].exp_server.host_group }}"
  tasks:
  - debug:
      var: groups
  - name:
    include_role:
      name: setup-common
    when: id == 'new' # only setup if it is a new experiment

- name: Setup "server" machines with server-specific setup
  hosts: "{{ hostvars['localhost'].exp_server.host_group }}"
  tasks:
  - debug:
      var: groups
  - name:
    include_role:
      name: setup-server
    when: id == 'new' # only setup if it is a new experiment

- name: Setup "client" machines with client-specific setup
  hosts: "{{ hostvars['localhost'].exp_client.host_group }}"
  tasks:
  - debug:
      var: groups
  - name:
    include_role:
      name: setup-client
    when: id == 'new' # only setup if it is a new experiment


##########################################################################
#   Run Experiment Jobs                                                  #
##########################################################################

- name: Run and monitor experiment jobs
  # variables 'exp_n_tries' and 'exp_check_wait_time' control how long this runs
  hosts: localhost
  tasks:
  - debug:
      msg: "Running Experiment Jobs..."
    tags: [print_action]

  - name: Try to sequentially run an experiment and wait until it's finished
    include_role:
      name: experiment-job
    when: exp_job_ids_unfinished | length > 0  # there are some unfinished jobs left
    loop: "{{ range(0, exp_n_tries, 1)|list }}"


##########################################################################
#   Cleanup AWS (terminate instances, remove vpc)                        #
##########################################################################

- name: Cleanup and Utility
  hosts: localhost
  tasks:

  - debug:
      msg: "Cleanup AWS..."
    tags: [print_action]
    when: awsclean | default(true) | bool  and exp_job_ids_unfinished | length == 0

  - name: Cleanup AWS
    include_role:
      name: experiment-aws
    vars:
      server_ec2_instances_num: 0
      server_ec2_instances_max_num: 0
      client_ec2_instances_num: 0
      client_ec2_instances_max_num: 0
    when: awsclean | default(true) | bool  and exp_job_ids_unfinished | length == 0

  - name: Output the run id of this experiment for convenience
    debug:
      var: exp_id
    when: id == 'new'

  # TODO: cleanup all experiments
  - debug:
      msg: "Finished Experiment: {{ exp_name }} (id={{ exp_id }})   #runs={{ exp_runs_ext | length }} #reps={{ n_repetitions }}  => #jobs={{ exp_job_ids | length }}"
    tags: [print_action]
    when: exp_job_ids_unfinished | length == 0
