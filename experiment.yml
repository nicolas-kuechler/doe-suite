---

##########################################################################
#   Load Experiment State and Setup AWS                                  #
##########################################################################
- name: Load Experiment State and Setup AWS
  hosts: localhost

  tasks:
    - name: Read the experiment configuration
      include_role:
        name: experiment-parse-config

    - name:
      set_fact:
        suite_init: True

    - name: Do load and setup for all experiments
      include_role:
        name: experiment-load
      vars:
        exp_name: "{{ experiment_item.key }}"
        experiment: "{{ experiment_item.value }}"
      loop: "{{ experiments | dict2items }}"
      loop_control:
        loop_var: experiment_item

    - name:
      set_fact:
        suite_init: False

    - name: Accumulate hosts in the same group among all host types
      set_fact:
        host_types: "{{ host_types
                       | default({})
                       | combine({ 'all':
                           {
                             host_group: { 'n': (host_types | json_query(host_group + '.*.n') | sum) }
                           }
                        }, recursive=True)
                     }}"
      loop: "{{ host_type_names }}"
      loop_control:
        loop_var: host_group

    - debug:
        msg: "Setup AWS..."
      tags: [print_action]
      when: id == 'new'

    - name: Setup AWS VPC
      include_role:
        name: experiment-aws-vpc
      vars:
        do_create_vpc: "{{ (host_types['all'] | json_query('*.n') | sum) > 0 }}"

    - name: Setup AWS EC2 instances
      include_role:
        name: experiment-aws
      when: host_group_name != 'all' and id == 'new'
      loop: "{{ host_types | dict2items }}"
      vars:
        host_group_name: "{{ host_type_item.key }}"
        host_exp_values: "{{ host_type_item.value }}"
        host_n_tot: "{{ host_types['all'] | json_query(host_group_name + '.n') }}"
      loop_control:
        loop_var: host_type_item

    # This loop is almost the same as the above one, but it's more performant
    # to first launch all EC2 instances and then connect to them.
    - name: Manage (start/stop) EC2 instances
      include_role:
        name: experiment-aws-ec2-manage
      when: host_group_name != 'all' and id == 'new'
      loop: "{{ host_types | dict2items }}"
      vars:
        host_group_name: "{{ host_type_item.key }}"
        host_exp_values: "{{ host_type_item.value }}"
      loop_control:
        loop_var: host_type_item

    - name: Save hosts belonging to this experiment suite in `suite_all`
      set_fact:
        suite_all: "{{ groups[ec2_tag_prj_prefix + prj_id] }}"

    - debug:
        var: groups

    - debug:
        msg: "Setup Host Machines..."
      tags: [print_action]

##########################################################################
#   Setup Machines                                                       #
##########################################################################

- name: Setup registered host types
  hosts: "{{ hostvars['localhost'].suite_all }}"
  strategy: free
  tasks:

  #
  # Set variables on all hosts
  #
  - name: Set variables on all hosts
    include_role:
      name: experiment-set-vars

  #
  # Execute the server's individual init roles
  #
  - name: Execute init roles (incl. common roles for all hosts)
    include_role:
      name: "{{ role_name }}"
    loop: "{{ ( ( [ host_facts.init_role | default([]) ] | flatten | list) )
                + ( [ exp_fact.common_roles | default([]) ] | flatten ) }}"
    loop_control:
      loop_var: role_name
    when: id == 'new' # only setup if it is a new experiment


##########################################################################
#   Run Experiment Jobs                                                  #
##########################################################################

#
# Set controller variables on localhost for next play
#
- name: Use one host per experiment as controller
  hosts: localhost
  tasks:
    - set_fact:
        # Choose the first host for every experiment group as controller
        controller_hosts: "{{ groups.keys()
                             | select('match', ec2_tag_exp_prefix + '*')
                             | list
                             | map('extract', groups, [0])
                             | list }}"

#
# Start experiments
#
- name: Start different experiments in parallel (but each experiment itself synchronized)
  hosts: "{{ hostvars['localhost'].controller_hosts }}"
  strategy: free
  tasks:
    - debug:
        msg: "Running experiment jobs for experiment {{ exp_name }}"
      tags: [print_action]

    - name: Set variable with all hosts of this experiment
      set_fact:
        exp_hosts: "{{ groups[ec2_tag_exp_prefix + exp_name] }}"

    - name: Set variable with other hosts than the controller for this experiment
      set_fact:
        exp_other_hosts: "{{ exp_hosts
                         | reject('equalto', inventory_hostname)
                         | list }}"

    - name: "Start jobs for experiment {{ exp_name }}"
      include_role:
        name: experiment-job
      vars:
        do_init_job: True


##########################################################################
#   Experiment status checking                                           #
##########################################################################

# the variables 'job_n_tries', 'job_check_wait_time', and 'check_status' control how
# long this runs
- name: Check the experiment status on all hosts and fetch intermediate results
  hosts: "{{ hostvars['localhost'].controller_hosts }}"
  strategy: free

  tasks:
    - name: "Run status and result fetching for experiment {{ exp_name }}"
      include_role:
        name: experiment-job-status
      loop: "{{ range(0, (exp_fact.exp_job_ids_unfinished | length), 1) | list }}"
      loop_control:
        loop_var: unfinished_job_idx

    - debug:
        msg: "Finishing experiment {{ exp_name }}"
      tags: [print_action]


##########################################################################
#   Cleanup AWS (terminate instances, remove vpc)                        #
##########################################################################

- name: Cleanup and Utility
  hosts: localhost
  tasks:

  - block:
    - name: Reset exp_facts
      set_fact:
          exp_facts_keys: "{{ exp_facts.keys() }}"
          exp_facts: {}

    - name: Load current experiment state (exp_facts) on localhost
      include_role:
        name: experiment-state
      vars:
        expstate: load
      loop: "{{ exp_facts_keys }}"
      loop_control:
        loop_var: exp_name

    - name: Check if all jobs are finished
      set_fact:
        all_exp_jobs_finished: "{{ (all_exp_jobs_finished | default(True))
                                   and (exp_facts_val.exp_job_ids_unfinished | length == 0)}}"
      loop: "{{ exp_facts.values() }}"
      loop_control:
        loop_var: exp_facts_val

  - block:
    - debug:
        msg: "Cleanup AWS..."
      tags: [print_action]

    - name: Cleanup AWS
      include_role:
        name: experiment-clear

    when: awsclean | default(true) | bool and all_exp_jobs_finished

  - name: Output the experiment suite id for convenience
    debug:
      var: suite_id
    when: id == 'new'

  - debug:
      msg: "Finished Experiment: {{ exp_name_loc }} (suite id={{ suite_id }})
            #runs={{ exp_fact_loc.exp_runs_ext | length }}
            #reps={{ exp_fact_loc.n_repetitions }}
            => #jobs={{ exp_fact_loc.exp_job_ids | length }}"
    vars:
      exp_name_loc: "{{ exp_facts_item.key }}"
      exp_fact_loc: "{{ exp_facts_item.value }}"
    loop: "{{ exp_facts | dict2items }}"
    loop_control:
      loop_var: exp_facts_item
    when: all_exp_jobs_finished
    tags: [print_action]
