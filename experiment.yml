---

##########################################################################
#   Load Experiment State and Setup AWS                                  #
##########################################################################
- name: Load Experiment State and Setup AWS
  hosts: localhost

  tasks:
  - name: Read the experiment configuration
    include_vars: experiments/designs/{{ exp_suite }}.yml

  - name: Preserve initial variable for all experiments
    set_fact:
        redefine_exp_id: "{{ exp_id is not defined }}"

  - name: Do load and setup for all experiments
    include_tasks:
      file: experiment_load.yml
    vars:
      exp_name: "{{ (item | dict2items | first).key }}"
      experiment: "{{ (item | dict2items | first).value }}"
      exp_cnt: "{{ ansible_loop.index0 }}"
      exp_cnt_max: "{{ ansible_loop.length }}"
    loop: "{{ experiments }}"
    loop_control:
      extended: yes

  - set_fact:
      redefine_exp_id: "{{ False }}"

  - name: Accumulate hosts in the same group among all host types
    set_fact:
      host_types: "{{ host_types
                     | default({})
                     | combine({ 'all':
                         {
                           host_group:
                             { 'n': (host_types | json_query(host_group + '.*.n') | sum),
                               'n_max': (host_types | json_query(host_group + '.*.n_max') | sum),
                             }
                         }
                      }, recursive=True)
                   }}"
    loop: "{{ host_types.keys() }}"
    loop_control:
      loop_var: host_group

  - debug:
      msg: "Setup AWS..."
    tags: [print_action]
    when: id == 'new'

  - name: Setup AWS VPC
    include_role:
      name: experiment-aws-vpc
    vars:
      do_create_vpc: "{{ (host_types['all'] | json_query('*.n_max') | sum) > 0 }}"

  - name: Setup AWS EC2 instances
    include_role:
      name: experiment-aws
    when: host_group_name != 'all' and id == 'new'
    loop: "{{ host_types | dict2items }}"
    vars:
      host_group_name: "{{ host_type.key }}"
      host_exp_values: "{{ host_type.value }}"
      host_n_max_tot: "{{ host_types['all'] | json_query(host_group_name + '.n_max') }}"
    loop_control:
      loop_var: host_type

  # This loop is almost the same as the above one, but it's more performant
  # to first launch all EC2 instances and then connect to them.
  - name: Manage (start/stop) EC2 instances
    include_role:
      name: experiment-aws-ec2-manage
    when: host_group_name != 'all' and id == 'new'
    loop: "{{ host_types | dict2items }}"
    vars:
      host_group_name: "{{ host_type.key }}"
      host_exp_values: "{{ host_type.value }}"
    loop_control:
      loop_var: host_type

  - debug:
      var: groups

  - debug:
      msg: "Setup Host Machines..."
    tags: [print_action]

##########################################################################
#   Setup Machines                                                       #
##########################################################################

- name: Setup registered host types
  hosts: all
  strategy: free
  tasks:
  # TODO: Cleanup: make one role only to set variables for all hosts
  - set_fact:
      # Get variables that were defined for the localhost to new hosts
      host_types: "{{ hostvars['localhost']['host_types'] }}"
      exp_facts: "{{ hostvars['localhost']['exp_facts'] }}"

      # Hacky way to recover variables from the hostname, since they were not
      # necessarily set if id != 'new'.
      host_unique_id: "{{ group_names \
                          | select('match', ec2_tag_name_prefix + '*') \
                          | first \
                          | split(ec2_tag_name_prefix + prj_id + '_') \
                          | last }}"

  - set_fact:
      host_group_name: "{{ host_unique_id \
                           | split(separator)
                           | first }}"
      exp_name: "{{ host_unique_id
                    | split(separator)
                    | last }}"

  - set_fact:
      exp_id: "{{ exp_facts[exp_name].exp_id }}" # TODO: cleanup: check if this is set elsewhere and remove it

  - name: Execute init roles (incl. common roles for all hosts)
    include_role:
      name: "{{ role_name }}"
    loop: "{{ ( ( [ host_types[host_group_name][exp_name].roles.init ] | flatten | list) ) \
                + ( [ exp_facts[exp_name].common_roles ] | flatten ) }}"
    loop_control:
      loop_var: role_name
    when: id == 'new' # only setup if it is a new experiment


##########################################################################
#   Run Experiment Jobs                                                  #
##########################################################################

- name: Run and monitor experiment jobs
  hosts: localhost
  tasks:
  - debug:
      msg: "Running Experiment Jobs..."
    tags: [print_action]

  - name: Run jobs of all experiments
    include_role:
      name: experiment-job


##########################################################################
#   Experiment status checking                                           #
##########################################################################

# the variables 'exp_n_tries', 'exp_check_wait_time', and 'n_check' control how
# long this runs
- name: Check the experiment status on all hosts and fetch intermediate results
  hosts: all
  strategy: free

  # TODO: outsource this to a file and load with include_vars?
  # TODO: remove this entirely, setting them once is enough!
  vars:
    # Hacky way to recover variables from the hostname, since they were not
    # necessarily set if id != 'new'.
    host_group_name_long: "{{ group_names \
                              | select('match', ec2_tag_name_prefix + '*') \
                              | first }}" # TODO: refactor
    host_unique_id: "{{ group_names \
                        | select('match', ec2_tag_name_prefix + '*') \
                        | first \
                        | split(ec2_tag_name_prefix + prj_id + '_') \
                        | last }}"
    host_group_name: "{{ host_unique_id \
                         | split(separator)
                         | first }}"
    exp_name: "{{ host_unique_id
                  | split(separator)
                  | last }}"

    # Get variables that were defined for the localhost to new hosts
    host_fact: "{{ hostvars['localhost']['host_types'][host_group_name] }}"
    exp_fact: "{{ hostvars['localhost']['exp_facts'][exp_name] }}"
  tasks:
    - block:
        - name: "Set variables for status check on host {{ inventory_hostname }}"
          set_fact:
            exp_job_ids_unfinished: "{{ exp_fact['exp_job_ids_unfinished'] }}"
            n_check: "{{ host_fact[exp_name].n_check }}"
            host_group_idx: "{{ lookup('ansible.utils.index_of', groups[host_group_name_long], 'eq', inventory_hostname) }}"

        - name: "Run status and result fetching for {{ exp_fact.exp_job_ids_unfinished | length }} jobs"
          include_role:
            name: experiment-job-status
          loop: "{{ range(0, (exp_fact.exp_job_ids_unfinished | length), 1) | list }}"
          loop_control:
            loop_var: unfinished_job_idx

        - debug:
            msg: "Finishing experiment {{ exp_name }}"
          tags: [print_action]
          when: exp_fact.exp_job_ids_unfinished | length == 0

      when: exp_fact.exp_job_ids_unfinished | length > 0


##########################################################################
#   Cleanup AWS (terminate instances, remove vpc)                        #
##########################################################################

- name: Cleanup and Utility
  hosts: localhost
  tasks:

  - debug:
      msg: "Cleanup AWS..."
    tags: [print_action]
    when: awsclean | default(true) | bool  and exp_job_ids_unfinished | length == 0

  # TODO: test this
  - name: Cleanup AWS
    include_role:
      name: experiment-clear
    when: awsclean | default(true) | bool  and exp_job_ids_unfinished | length == 0

  - name: Output the run id of this experiment for convenience
    debug:
      var: exp_id
    when: id == 'new'

  # TODO: cleanup all experiments
  - debug:
      msg: "Finished Experiment: {{ exp_name }} (id={{ exp_id }})   #runs={{ exp_runs_ext | length }} #reps={{ n_repetitions }}  => #jobs={{ exp_job_ids | length }}"
    tags: [print_action]
    when: exp_job_ids_unfinished | length == 0
