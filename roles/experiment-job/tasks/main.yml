---

- assert:
    that:
    - exp_name is defined
    - exp_fact is defined

# Set those variables to be able to conveniently update them. We update exp_fact in the end.
- name: Set local experiment variables
  set_fact:
    # Only use the values from exp_fact if it there has not been an updated version set locally.
    exp_runs_ext: "{{ exp_runs_ext | default(exp_fact.exp_runs_ext) }}"
    exp_job_ids: "{{ exp_job_ids | default(exp_fact.exp_job_ids) }}"
    exp_job_ids_unfinished: "{{ exp_job_ids_unfinished | default(exp_fact.exp_job_ids_unfinished) }}"
    exp_job_ids_pending: "{{ exp_job_ids_pending | default(exp_fact.exp_job_ids_pending) }}"
    exp_job_ids_running: "{{ exp_job_ids_running | default(exp_fact.exp_job_ids_running) }}"
    n_repetitions: "{{ exp_fact.n_repetitions }}"

    do_init_job: "{{ do_init_job | default(False) }}"

- assert:
    that:
    - exp_runs_ext is defined
    - exp_job_ids is defined
    - exp_job_ids_unfinished is defined
    - exp_job_ids_pending is defined
    - exp_job_ids_running is defined
    - n_repetitions is defined
    - suite_id is defined
    - job_check_wait_time is defined

# Skip all tasks if there are no unfinshed jobs left.
- block:
  - debug:
      msg:
        - "exp_job_ids_pending: {{ exp_job_ids_pending }}"
        - "exp_job_ids_running: {{ exp_job_ids_running }}"
        - "exp_runs_ext: {{ exp_runs_ext }}"
        - "suite_id: {{ suite_id }}"
        - "job_check_wait_time: {{ job_check_wait_time }}"


  ##########################################################################
  #   Setup next (new) experiment run                                      #
  ##########################################################################

  - name:
    set_fact:
      new_running_job_id: null

  - name: Find new running job ID
    set_fact:
      new_running_job_id: "{{ exp_job_ids_pending | first }}"
    when: (exp_job_ids_running | length) == 0

  - name:
    set_fact:
      exp_job_ids_pending: "{{ exp_job_ids_pending | reject('equalto', new_running_job_id) | list }}"
      exp_job_ids_running: "{{ [ new_running_job_id ] }}"
    when: new_running_job_id is not none

  - name: Set the running job id
    set_fact:
      running_job_id: "{{ exp_job_ids_running[0] | string }}"

  - name: Extract `exp_run` (run) and `exp_run_rep` (repetition) from `running_job_id`
    set_fact:
      # Job ID structure: <experiment_name>-<run_id>_<rep_id>
      exp_run: "{{ running_job_id | string | split('-') | last | split('_') | first | int }}"
      exp_run_rep: "{{ running_job_id | string | split('_') | last | int }}"

  - name: Set the exp run config
    set_fact:
      exp_run_config: "{{ exp_runs_ext[exp_run | int] }}"

  - name: Set the experiment working directory
    set_fact:
      exp_working_dir: "{{ remote.dir }}/results/{{ suite }}_{{ suite_id }}/{{ exp_name }}/\
                        run_{{ exp_run }}/rep_{{ exp_run_rep }}"
      exp_code_dir: "{{ remote.dir }}/code"

  - name: Update run facts on other hosts of the same experiment
    set_fact:
      exp_working_dir: "{{ exp_working_dir }}"
      exp_run: "{{ exp_run }}"
      exp_run_rep: "{{ exp_run_rep }}"
      exp_run_config: "{{ exp_run_config }}"
    delegate_to: "{{ host }}"
    delegate_facts: true
    loop: "{{ exp_other_hosts }}"
    loop_control:
      loop_var: host

  - block:
    - name: Create results directory
      file:
        path: "{{ exp_working_dir }}/results"
        state: directory
        mode: 0755
        group: ubuntu
        owner: ubuntu
      delegate_to: "{{ host }}"
      loop: "{{ exp_hosts }}"
      loop_control:
        loop_var: host

    - name: Create scratch directory
      file:
        path: "{{ exp_working_dir }}/scratch"
        state: directory
        mode: 0755
        group: ubuntu
        owner: ubuntu
      delegate_to: "{{ host }}"
      loop: "{{ exp_hosts }}"
      loop_control:
        loop_var: host
    when: do_init_job

  ##########################################################################
  #   Start a new experiment (as a service -> does not block)              #
  ##########################################################################
  - block:
    - debug:
        msg: "Starting new job... suite={{ suite_id }} exp={{ exp_name }} run={{ exp_run }} repetition={{ exp_run_rep }}     \
              |     Experiment Progress {{ progress_percent }}%  (overall)"
      vars:
        progress_percent: "{{ (100 * (exp_job_ids|length - exp_job_ids_unfinished|length) / exp_job_ids|length)|round }}"
      tags: [print_action]

    - name: Start new experiment on all hosts (if there is none running atm)
      include_role:
        name: experiment-job-start

    when: new_running_job_id is not none

  ##########################################################################
  #   Update experiment state                                              #
  ##########################################################################

  - name: Save the updated state of the experiment run (save job ids)
    include_role:
      name: experiment-state
    vars:
      expstate: save

  - debug:
      msg="new_running_job_id={{ new_running_job_id | default('-') }}    pending={{ exp_job_ids_pending }} running={{ exp_job_ids_running }}"

  when: (exp_job_ids_unfinished | length) != 0
