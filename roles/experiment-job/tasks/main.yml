---

- assert:
    that:
    - exp_role == 'controller' # this role is running on a controller host (one per experiment is controller)
    - exp_name is defined
    - exp_fact is defined

    - exp_host_lst is defined # list of hosts involved in experiment
        #[{"host_type": x, "exp_host_type_idx": x, "exp_host_type_n": x, "exp_role": x, "public_dns_name": x, "private_ip_address": x}]

  
# Set those variables to be able to conveniently update them. We update exp_fact in the end.
- name: Set local experiment variables
  set_fact:
    # Only use the values from exp_fact if it there has not been an updated version set locally.
    exp_runs_ext: "{{ exp_runs_ext | default(exp_fact.exp_runs_ext) }}"
    exp_job_ids: "{{ exp_job_ids | default(exp_fact.exp_job_ids) }}"
    exp_job_ids_unfinished: "{{ exp_job_ids_unfinished | default(exp_fact.exp_job_ids_unfinished) }}"
    exp_job_ids_pending: "{{ exp_job_ids_pending | default(exp_fact.exp_job_ids_pending) }}"
    exp_job_ids_queued: "{{ exp_job_ids_queued | default(exp_fact.exp_job_ids_queued) }}"
    exp_job_ids_running: "{{ exp_job_ids_running | default(exp_fact.exp_job_ids_running) }}"
    exp_job_ids_finished: "{{ exp_job_ids_finished | default(exp_fact.exp_job_ids_finished) }}"
    n_repetitions: "{{ exp_fact.n_repetitions }}"
    do_init_job: "{{ do_init_job | default(False) }}"

- assert:
    that:
    - exp_runs_ext is defined
    - exp_job_ids is defined
    - exp_job_ids_unfinished is defined
    - exp_job_ids_pending is defined
    - exp_job_ids_queued is defined
    - exp_job_ids_running is defined
    - exp_job_ids_finished is defined
    - n_repetitions is defined
    - suite_id is defined
    - job_check_wait_time is defined

###################################################################
#  Start: Schedule new Jobs (enqueue task in task spooler)        #
###################################################################

- name: Schedule new Jobs
  # only schedule new jobs when there are no jobs queued or running atm
  when: exp_job_ids_pending | length > 0 and exp_job_ids_queued | length == 0 and exp_job_ids_running | length == 0
  block:

  - set_fact:
      is_single_instance_exp: "{{ exp_host_lst | length == 1}}"

  - name: Enqueue all jobs from pending because it is a single instance experiment (no synchronization required)
    set_fact:
      exp_job_ids_to_enqueue: "{{ exp_job_ids_pending }}"
    when: is_single_instance_exp

  - name: Enqueue only one job from pending because it is a multi instance experiment (synchronization required)
    set_fact:
        exp_job_ids_to_enqueue: "{{ [exp_job_ids_pending[0]] }}"
    when: not is_single_instance_exp


  - assert:
      that:
      - exp_job_ids_queued | length == 0

  - set_fact:
      exp_jobs_to_enqueue: []

  - name: Build list of jobs used to schedule
    set_fact:
        exp_jobs_to_enqueue: "{{ exp_jobs_to_enqueue  + [
            {
                'host_info': my_job_host.host_info,
                'job_info': my_job_host.job_info,
                'exp_run_config': exp_runs_ext[my_exp_run|int],
                'exp_run_cmd': exp_runs_ext[my_exp_run|int]['$CMD$'][my_host_type],
                'exp_working_dir': my_job_host.job_info | jobid2workingdir(remote.dir),
            }
            ] | list}}"
    vars:
        my_exp_run: "{{ my_job_host.job_info.exp_run }}"
        my_host_type: "{{ my_job_host.host_info.host_type }}"
    loop: "{{ exp_job_ids_to_enqueue | product(exp_host_lst) | map('tuple2dict', ['job_info', 'host_info']) | list }}"
    loop_control:
        loop_var: my_job_host

    ###################################################################
    #  Prepare Experiment Environment (directories, files, ...)       #
    ###################################################################

    # TODO [nku] possible to run async?
  - name: Create results directory
    ansible.builtin.file:
        path: "{{ job.exp_working_dir }}/results"
        state: directory
        mode: 0755
        group: ubuntu
        owner: ubuntu
    delegate_to: "{{ job.host_info.public_dns_name }}"
    loop: "{{ exp_jobs_to_enqueue }}"
    loop_control:
        loop_var: job

  - name: Create scratch directory
    ansible.builtin.file:
        path: "{{ job.exp_working_dir }}/scratch"
        state: directory
        mode: 0755
        group: ubuntu
        owner: ubuntu
    delegate_to: "{{ job.host_info.public_dns_name }}"
    loop: "{{ exp_jobs_to_enqueue }}"
    loop_control:
        loop_var: job

  - name: Create run config file in working directory
    template:
        src: config.json.j2
        dest: "{{ job.exp_working_dir }}/config.json"
        mode: 0755
    delegate_to: "{{ job.host_info.public_dns_name }}"
    loop: "{{ exp_jobs_to_enqueue }}"
    loop_control:
        loop_var: job

    ###################################################################
    #  Enqueue all Jobs                                               #
    ###################################################################

  - name: Clear task spooler queue on each host (+ stop all running jobs)
    tsp:
        clear_tasks: True
    delegate_to: "{{ host }}"
    loop: "{{ groups[exp_name] }}" 
    loop_control:
      loop_var: host

  - name: Enqueue all jobs on the task spooler
    tsp:
        cmd: "{{ job.exp_run_cmd }}"
        cmd_label: "{{ job.job_info | to_json | string }}"
        cmd_working_dir: "{{ job.exp_working_dir }}"
        cmd_stdout_file: results/stdout.log
        cmd_stderr_file: results/stderr.log
    delegate_to: "{{ job.host_info.public_dns_name }}"
    loop: "{{ exp_jobs_to_enqueue }}"
    loop_control:
        loop_var: job

  - name: Update experiment state
    set_fact:
      exp_job_ids_queued: "{{ exp_job_ids_to_enqueue }}" 
      exp_job_ids_pending: "{{  exp_job_ids_pending | difference(exp_job_ids_to_enqueue) }}"
      exp_job_ids_to_enqueue: []

###################################################################
#  End: Schedule new Jobs (enqueue task in task spooler)        #
###################################################################




###################################################################
#  Wait and the Get Status of All Job                             #
###################################################################


- name: Set the job id to wait until finished + update state
  set_fact:
    job_id_to_wait_for: "{{ cur_job_id }}"
    exp_job_ids_queued: "{{ exp_job_ids_queued | difference([cur_job_id]) }}"
    exp_job_ids_running: "{{ [cur_job_id] }}"
  vars:
    # if there is still a running_job_id then take this one, else take the first of the queued jobs
    cur_job_id:  "{{ (exp_job_ids_running | list + exp_job_ids_queued | list) | first }}"


- name: Save the updated state of the experiment run (save job ids)
  include_role:
    name: experiment-state
  vars:
    expstate: save

- name: Get status of job
  tsp_info:
  register: tsp_result
  until: (tsp_result.tasks | tsp_job_finished(job_id_to_wait_for)) | bool
  retries: 30 # TODO [nku] add as variables
  delay: 5 # TODO [nku] add as variables
  delegate_to: "{{ host }}"
  loop: "{{ groups[exp_name] }}" # TODO [nku] need to adjust to respect status check flag (could also ignore later on)
  loop_control:
    loop_var: host


###################################################################
#  Download Results for newly finished job                        #
###################################################################

- name: Download Results
  block:

  - debug:
      msg:
      - "remote_results_dir={{ remote_results_dir }}"
      - "local_results_dir_base={{ local_results_dir_base }}"
      - "remote_config_file= {{ remote_config_file }}"

  - name: Create local folder (for results)
    delegate_to: localhost
    file:
      path: "{{ local_results_dir_base }}/{{ my_host.host_type }}/host_{{ my_host.exp_host_type_idx }}"
      state: directory
      mode: 0755
    loop: "{{ exp_host_lst }}"
    loop_control:
      loop_var: my_host

  - name: Fetch Results (if experiment done)
    delegate_to: localhost
    local_action: command rsync -az "{{ my_host.public_dns_name }}:{{ remote_results_dir }}/*" "{{ local_results_dir_base }}/{{ my_host.host_type }}/host_{{ my_host.exp_host_type_idx }}"
    loop: "{{ exp_host_lst }}"
    loop_control:
      loop_var: my_host
  
  - name: Save the config of the job
    delegate_to: localhost
    local_action: "command rsync -az '{{ inventory_hostname }}:{{ remote_config_file }}' '{{ local_results_dir_base }}'"


  vars:
  - remote_results_dir: "{{ job_id_to_wait_for | jobid2workingdir(remote.dir) + '/results' }}"
  - local_results_dir_base: "{{ job_id_to_wait_for | jobid2workingdir('') }}"
  - remote_config_file: "{{ job_id_to_wait_for | jobid2workingdir(remote.dir) + '/config.json' }}"

###################################################################
#  Cleanup task spooler queue                                     #
###################################################################

- name: Remove finished job with downloaded results from queue
  tsp:
    remove_task_label: "{{ job_id_to_wait_for | to_json | string }}"
  delegate_to: "{{ host }}"
  loop: "{{ groups[exp_name] }}"
  loop_control:
    loop_var: host

###################################################################
#  Update experiment state                                        #
###################################################################

- name:
  set_fact:
    exp_job_ids_running: []
    exp_job_ids_finished: "{{ exp_job_ids_finished | list + [job_id_to_wait_for] }}"

- name:
  set_fact:
    exp_job_ids_unfinished: "{{ exp_job_ids_pending | list + exp_job_ids_queued | list + exp_job_ids_running | list}}"

- name: Save the updated state of the experiment run (save job ids)
  include_role:
    name: experiment-state
  vars:
    expstate: save