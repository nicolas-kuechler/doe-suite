# - if running is empty: setup new experiment
#
- assert:
    that:
    - exp_job_ids_running is defined
    - exp_runs_ext is defined
    - exp_id is defined
    - exp_check_wait_time is defined

- name: Check if no unfinished jobs -> end role (play)
  meta: end_play
  when: exp_job_ids_unfinished | length == 0

- debug:
    var: exp_job_ids_running
- debug:
    var: exp_runs_ext
- debug:
    var: exp_id
- debug:
    var: exp_check_wait_time



##########################################################################
#   Setup next (new) experiment run                                      #
##########################################################################

- name: 
  set_fact:
    new_running_job_id: null

- name: 
  set_fact:
    new_running_job_id: "{{ exp_job_ids_pending | list | first }}"
  when: exp_job_ids_running | length == 0

- name:
  set_fact:
    exp_job_ids_pending: "{{ exp_job_ids_pending | reject('equalto', new_running_job_id) | list }}"
    exp_job_ids_running: "['{{ new_running_job_id }}']"
  when: new_running_job_id is not none 

- name: Set the running job id
  set_fact:
    running_job_id: "{{ exp_job_ids_running[0]|string }}"

- name: Extract `exp_run` (run) and `exp_run_rep` (repetition) from `running_job_id`
  set_fact:
    exp_run: "{{ running_job_id | string | split('_')| first | int }}"
    exp_run_rep: "{{ running_job_id | string | split('_')| last | int }}"

- name: Set the exp run config
  set_fact:
    exp_run_config: "{{ exp_runs_ext[exp_run | int] }}"

- name: Set the experiment working directory
  set_fact:
    exp_working_dir: "{{ remote.dir }}/results/exp_{{ exp_name }}_{{ exp_id }}/run_{{ exp_run }}/rep_{{ exp_run_rep }}"


- name: Create results directory
  file:
    path: "{{ exp_working_dir }}/results"
    state: directory
    mode: 0755
    group: ubuntu
    owner: ubuntu
  delegate_to: "{{ host }}"
  loop: "{{ groups[exp_client.host_group]| default([]) | union(groups[exp_server.host_group]| default([]) ) }}"
  loop_control:
    loop_var: host

- name: Create scratch directory
  file:
    path: "{{ exp_working_dir }}/scratch"
    state: directory
    mode: 0755
    group: ubuntu
    owner: ubuntu
  delegate_to: "{{ host }}"
  loop: "{{ groups[exp_client.host_group]| default([]) | union(groups[exp_server.host_group]| default([])) }}"
  loop_control:
    loop_var: host

##########################################################################
#   Start a new experiment (as a service -> does not block)              #
##########################################################################

- debug:
    msg: "Starting new job... run={{ exp_run }} repetition={{ exp_run_rep }}     |     Experiment Progress {{ progress_percent }}%  (overall)"
  vars:
    cur_run: "{{ exp_run|int + 1 }}"
    n_runs: "{{ exp_runs_ext|length }}"
    cur_rep: "{{ exp_run_rep|int + 1 }}"
    n_reps: "{{ n_repetitions }}"
    progress_percent: "{{ (100 * (exp_job_ids|length - exp_job_ids_unfinished|length) / exp_job_ids|length)|round }}"
  tags: [print_action]
  when: new_running_job_id is not none

- name: Start new experiment (if there is no running atm)
  include_role:
    name: experiment-job-start
  when: new_running_job_id is not none


##########################################################################
#   Update experiment state                                              #
##########################################################################

- name: Save the updated state of the experiment run (save job ids)
  include_role:
    name: experiment-state
  vars:
    expstate: save


- debug:
    msg="new_running_job_id={{ new_running_job_id| default('-')}}    pending={{ exp_job_ids_pending }} running={{ exp_job_ids_running }}"

- name: Check if no unfinished jobs -> end role (play)
  meta: end_play
  when: exp_job_ids_unfinished | length == 0

##########################################################################
#   Wait and then check if experiment finished                           #
##########################################################################

- name: Sleep for X seconds before checking job status
  wait_for:
    timeout: "{{ exp_check_wait_time }}"
  when:
  - exp_check_wait_time > 0

- name: Check the job status ('exp_client.n_hosts_status_check' and 'exp_server.n_hosts_status_check' controls how many hosts are checked)
  include_role:
    name: experiment-job-status

- debug:
    msg: "Completing job..."
  tags: [print_action]
  when: is_cur_exp_finished

##########################################################################
#   Create local directory and fetch results                         #
##########################################################################

- set_fact:
    server_hosts: []
    client_hosts: []
  when: is_cur_exp_finished

- set_fact:
    server_hosts: "{{ server_hosts | default([]) + [{'host': host, 'host_type': 'server', 'idx': idx}] | list}}"
  loop: "{{ groups[exp_server.host_group] | default([]) }}" 
  loop_control:
    loop_var: host
    index_var: idx
  when: is_cur_exp_finished

- set_fact:
    client_hosts: "{{ client_hosts | default([]) + [{'host': host, 'host_type': 'client', 'idx': idx}] | list}}"
  loop: "{{ groups[exp_client.host_group] | default([]) }}" 
  loop_control:
    loop_var: host
    index_var: idx
  when: is_cur_exp_finished


- name: Fetch the results
  include_role:
    name: experiment-job-result
  vars:
    remote_hosts: "{{ server_hosts|list + client_hosts | list}}"
    remote_results_dir: "{{ exp_working_dir }}/results"
    local_results_dir: results/exp_{{ exp_name }}_{{ exp_id }}/run_{{ exp_run }}/rep_{{ exp_run_rep }}
    remote_config_file: "{{ exp_working_dir }}/config.json"
  when: is_cur_exp_finished


##########################################################################
#   Update experiment state                                              #
##########################################################################

- name: Update the job ids list (remove experiment from running)
  set_fact: 
    exp_job_ids_finished: "{{ exp_job_ids_finished|list + exp_job_ids_running|list}}"
    exp_job_ids_running: []
    exp_job_ids_unfinished: "{{ exp_job_ids_pending|list + exp_job_ids_queued|list}}"
  when: is_cur_exp_finished


- name: Save the updated state of the experiment run (save job ids)
  include_role:
    name: experiment-state
  vars:
    expstate: save
  when: is_cur_exp_finished

