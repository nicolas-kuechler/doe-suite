- assert:
    that:
    - exp_name is defined
    - exp_fact is defined

# Those variables cannot be set on the include_tasks role, because then, they
# can no longer be changed with set_fact.
- name: Set variables
  set_fact:
    # Only use the values from exp_fact if it there has not been an updated version set locally.
    exp_runs_ext: "{{ exp_runs_ext | default(exp_fact.exp_runs_ext) }}"
    exp_job_ids: "{{ exp_job_ids | default(exp_fact.exp_job_ids) }}"
    exp_job_ids_unfinished: "{{ exp_job_ids_unfinished | default(exp_fact.exp_job_ids_unfinished) }}"
    exp_job_ids_pending: "{{ exp_job_ids_pending | default(exp_fact.exp_job_ids_pending) }}"
    exp_job_ids_running: "{{ exp_job_ids_running | default(exp_fact.exp_job_ids_running) }}"
    n_repetitions: "{{ exp_fact.n_repetitions }}"
    exp_id: "{{ exp_fact.exp_id }}"

- assert:
    that:
    - exp_job_ids is defined
    - exp_runs_ext is defined
    - exp_job_ids_unfinished is defined
    - exp_job_ids_pending is defined
    - exp_job_ids_running is defined
    - n_repetitions is defined
    - exp_id is defined
    - exp_check_wait_time is defined

- name: Check if no unfinished jobs -> end role (play)
  meta: end_play
  when: (exp_job_ids_unfinished | length) == 0

- debug:
    msg:
      - "exp_job_ids_pending: {{ exp_job_ids_pending }}"
      - "exp_job_ids_running: {{ exp_job_ids_running }}"
      - "exp_runs_ext: {{ exp_runs_ext }}"
      - "exp_id: {{ exp_id }}"
      - "exp_check_wait_time: {{ exp_check_wait_time }}"


##########################################################################
#   Setup next (new) experiment run                                      #
##########################################################################
# TODO: remove
- name: status in experiment-job subtask
  debug:
    msg:
      - "hostname: {{ inventory_hostname }}"
      - "exp_job_ids_running: {{ exp_job_ids_running | default('-') }}"

- name:
  set_fact:
    new_running_job_id: null

- name: Find new running job ID
  set_fact:
    new_running_job_id: "{{ exp_job_ids_pending | first }}"
  when: (exp_job_ids_running | length) == 0

- name:
  set_fact:
    exp_job_ids_pending: "{{ exp_job_ids_pending | reject('equalto', new_running_job_id) | list }}"
    exp_job_ids_running: "{{ [ new_running_job_id ] }}"
  when: new_running_job_id is not none

# TODO: remove
- debug:
    msg:
      - "hostname: {{ inventory_hostname }}"
      - "HERE: exp_job_ids_pending: {{ exp_job_ids_pending }}"
      - "exp_job_ids_running: {{ exp_job_ids_running }}"
      - "new_running_job_id: {{ new_running_job_id | default('-') }}"
- debug:
    var: exp_job_ids_running

- name: Set the running job id
  set_fact:
    running_job_id: "{{ exp_job_ids_running[0] | string }}"

- name: Extract `exp_run` (run) and `exp_run_rep` (repetition) from `running_job_id`
  set_fact:
    exp_run: "{{ ( running_job_id | string | split('_') )[1] | int }}"
    exp_run_rep: "{{ running_job_id | string | split('_') | last | int }}"

- name: Set the exp run config
  set_fact:
    exp_run_config: "{{ exp_runs_ext[exp_run | int] }}"

- name: Set the experiment working directory
  set_fact:
    exp_working_dir: "{{ remote.dir }}/results/{{ exp_suite }}/{{ exp_name }}_{{ exp_id }}/run_{{ exp_run }}/rep_{{ exp_run_rep }}"
    exp_code_dir: "{{ remote.dir }}/code"

- block:
  - name: Set run facts on remote host
    set_fact:
      exp_working_dir: "{{ exp_working_dir }}"
      exp_run: "{{ exp_run }}"
      exp_run_rep: "{{ exp_run_rep }}"
    delegate_to: "{{ host }}"
    delegate_facts: true
    loop: "{{ groups[ec2_tag_exp_prefix + exp_name] | default([]) }}"
    loop_control:
      loop_var: host

  - name: Create results directory
    file:
      path: "{{ exp_working_dir }}/results"
      state: directory
      mode: 0755
      group: ubuntu
      owner: ubuntu
    delegate_to: "{{ host }}"
    loop: "{{ groups[ec2_tag_exp_prefix + exp_name] | default([]) }}"
    loop_control:
      loop_var: host

  - name: Create scratch directory
    file:
      path: "{{ exp_working_dir }}/scratch"
      state: directory
      mode: 0755
      group: ubuntu
      owner: ubuntu
    delegate_to: "{{ host }}"
    loop: "{{ groups[ec2_tag_exp_prefix + exp_name] | default([]) }}"
    loop_control:
      loop_var: host
  when: do_init_job

##########################################################################
#   Start a new experiment (as a service -> does not block)              #
##########################################################################

# TODO: remove
- debug:
    msg: "TODO: new_running_job_id = {{ new_running_job_id }}"

- debug:
    msg: "Starting new job... run={{ exp_run }} repetition={{ exp_run_rep }}     \
          |     Experiment Progress {{ progress_percent }}%  (overall)"
  vars:
    cur_run: "{{ exp_run|int + 1 }}"
    n_runs: "{{ exp_runs_ext|length }}"
    cur_rep: "{{ exp_run_rep|int + 1 }}"
    n_reps: "{{ n_repetitions }}"
    progress_percent: "{{ (100 * (exp_job_ids|length - exp_job_ids_unfinished|length) / exp_job_ids|length)|round }}"
  tags: [print_action]
  when: new_running_job_id is not none

- name: Start new experiment on all hosts (if there is none running atm)
  include_role:
    name: experiment-job-start
  vars:
    host_stats: "{{ host_types[host_group_name][exp_name] }}" # TODO: change variable host_types[exp_name] to host_types after renaming
    host_group_name_long: "{{ ec2_tag_name_prefix + prj_id + '_' + host_group_name + separator + exp_name }}" # TODO search better name
  loop: "{{ host_type_names }}"
  loop_control:
    loop_var: host_group_name
  when: new_running_job_id is not none and do_init_job

- name: Start new experiment only on the current host (if there is none running atm)
  include_role:
    name: experiment-job-start
  vars:
    host_stats: "{{ host_fact[exp_name] }}" # TODO: probably define host_stats directly in experiment.yml for all hosts
  when: new_running_job_id is not none and not do_init_job

##########################################################################
#   Update experiment state                                              #
##########################################################################

- name: Save the updated state of the experiment run (save job ids)
  include_role:
    name: experiment-state
  vars:
    expstate: save

# TODO: remove
- debug:
    var: new_running_job_id

- debug:
    msg="new_running_job_id={{ new_running_job_id | default('-') }}    pending={{ exp_job_ids_pending }} running={{ exp_job_ids_running }}"

- name: Check if no unfinished jobs -> end role (play)
  meta: end_play
  when: exp_job_ids_unfinished | length == 0
