---

- assert:
    that:
      - suite is defined
      - exp_name is defined
      - id is defined
      - expstate == 'load' or expstate == 'save'
      - id == 'new' or id == 'last' or id|int > 0

- set_fact:
    is_init: False
    suite_init: "{{ suite_init | default(False) }}"

- block:
    - name: Set suite id from command argument
      set_fact:
        suite_id: "{{ id | int }}"
      when: id != 'new' and id != 'last' # continue the last experiment suite run

    - block:
        - name: Find all experiments state of the experiment with '`suite`_\d+' as name
          find:
            paths: "{{ local.exp_state_dir }}"
            patterns: "^{{suite}}_\\d+$"
            file_type: directory
            use_regex: yes
          register: suite_dirs_found

        - name: Find the highest `suite_id`
          set_fact:
            max_suite_id: "{{ ansible_date_time.epoch if suite_dirs_found.matched == 0
                                  else (suite_dirs_found
                                  | json_query('files[*].path')
                                  | sort
                                  | last
                                  | split('_')
                                  | last ) }}"

        - name: Create new suite id + mark as init
          set_fact:
            is_init: True
            suite_id: "{{ (max_suite_id | int) + 1 }}"
          when: id == 'new' and expstate == 'load'  # init experiment

        - name: Set suite ID to the highest one that was found
          set_fact:
            suite_id: "{{ max_suite_id | int }}"
          when: id == 'last' and expstate == 'load'  # init experiment

      when: id == 'new' or id == 'last'
  when: suite_id is not defined

- debug:
    msg: "suite_id={{ suite_id }}, exp_name={{ exp_name }}"

- name: Reset experiment state to []
  set_fact:
    exp_runs_ext: []
    exp_job_ids: []
    exp_job_ids_unfinished: []
    exp_job_ids_pending: []
    exp_job_ids_running: []
  when: (is_init or suite_init) and expstate == 'load'

- name: Init the experiment state by expanding the `experiment.base_experiment` with the varying params in the experiments
  set_fact:
    exp_runs_ext: "{{ exp_runs_ext
                      | union([
                          experiment.base_experiment
                          | combine( exp_item, recursive=True )
                          | combine({ '~FACTORS_LEVEL': { 'args': exp_item } })
                      ])}}"
  loop: "{{ experiment.factor_levels }}"
  when: is_init or suite_init
  loop_control:
    loop_var: exp_item

- assert:
    that:
    - not '$FACTOR$' in (exp_runs_ext | string)
    fail_msg: "missing level for at least one factor in the experiment config (i.e., not all '$FACTOR$' are replaced)"
  when: is_init or suite_init

- name: Set experiment directory
  set_fact:
    exp_state_dir: "{{ local.exp_state_dir }}/{{ suite }}_{{ suite_id }}/{{ exp_name }}"

- name: Create exp directory if it does not exist
  delegate_to: localhost
  file:
    path: "{{ exp_state_dir }}"
    state: directory
    mode:  0755
  when: is_init or suite_init

- name: Use previous values for undefined new state values in a state update
  block:
    - name: Load previous state
      include_vars:
        file: "{{ exp_state_dir }}/state.yml"
        name: prev_state

    - name: Set variables to previous value if undefined
      set_fact:
        n_repetitions_templ: "{{ n_repetitions_templ | default(prev_state.n_repetitions) }}"
        host_types_templ: "{{ host_types_templ | default(prev_state.host_types) }}"
        common_roles_templ: "{{ common_roles_templ | default(prev_state.common_roles) }}"
  when: experiment is not defined

- name: Set variables to prepare for saving the state
  set_fact:
    n_repetitions_templ: "{{ experiment.n_repetitions }}"
    host_types_templ: "{{ experiment.host_types }}"
    common_roles_templ: "{{ experiment.common_roles }}"
  when: experiment is defined

- name: Save the Experiment State in the Run Directory
  delegate_to: localhost
  template:
    src: state.yml.j2
    dest: "{{ exp_state_dir }}/state.yml"
    mode:  0755
  when: expstate == 'save' or is_init or suite_init

- name: Load Experiment State
  # Be careful: any variables you set with set_fact will not be overwritten with
  # include_vars due to the variable precedence of different sources in Ansible.
  include_vars:
    file: "{{ exp_state_dir }}/state.yml"
    name: state

- name: Set experiment variables (facts) based on loaded state
  set_fact:
    exp_facts: "{{ exp_facts | default({}) | combine({ exp_name: { fact_item.key : fact_item.value } }, recursive=True) }}"
  loop:
    - { 'key': 'suite_id', 'value': "{{ suite_id }}" }
    - { 'key': 'exp_runs_ext', 'value': "{{ state.exp_runs_ext }}" }
    - { 'key': 'exp_job_ids', 'value': "{{ state.exp_job_ids }}" }
    - { 'key': 'exp_job_ids_unfinished', 'value': "{{ state.exp_job_ids_unfinished }}" }
    - { 'key': 'exp_job_ids_pending', 'value': "{{ state.exp_job_ids_pending }}" }
    - { 'key': 'exp_job_ids_running', 'value': "{{ state.exp_job_ids_running }}" }
    - { 'key': 'n_repetitions', 'value': "{{ state.n_repetitions }}" }
    - { 'key': 'common_roles', 'value': "{{ state.common_roles }}" }
  loop_control:
    loop_var: fact_item

- name: Set host types based on loaded state
  set_fact:
    host_types: "{{ host_types
                    | default({})
                    | combine({
                        host_type_item.key: {
                          exp_name: host_type_item.value
                        }
                      }, recursive=True)
                }}"
  loop: "{{ state.host_types | dict2items }}"
  loop_control:
    loop_var: host_type_item

- name: Set host type names (without the special type 'all')
  set_fact:
    host_type_names: "{{ state.host_types.keys() | list }}"

- name: Update experiment facts on all involved hosts
  set_fact:
    exp_fact: "{{ hostvars[inventory_hostname].exp_facts[exp_name] }}"
    exp_facts: "{{ hostvars['localhost'].exp_facts
                   | combine({ exp_name: hostvars[inventory_hostname].exp_facts[exp_name] }) }}"
  delegate_to: "{{ host }}"
  delegate_facts: true
  loop: "{{ exp_hosts }}"
  loop_control:
    loop_var: host
  when: exp_hosts is defined
