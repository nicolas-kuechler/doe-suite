---

- assert:
    that:
    - exp_suite is defined
    - exp_name is defined
    - id is defined
    - expstate == 'load' or expstate == 'save'
    - id == 'new' or id == 'last' or id|int > 0

- name:
  set_fact:
    is_init: False

- name: Set exp id from command argument
  set_fact:
    exp_id: "{{ id }}"
  # The last conjunction is a workaround to make it possible to unset exp_id
  # instead of using "exp_id is not defined"
  when: id != 'new' and id != 'last' and redefine_exp_id # continue an experiment run

- name: Find all experiments state of the experiment with '`exp_suite`_`exp_name`_\d+' as name
  find:
    paths: "{{ local.exp_state_dir }}"
    patterns: "^{{ exp_suite }}_.*_\\d+$"
    file_type: directory
    use_regex: yes
  register: state_dirs_found

- name: Find the highest `exp_id`
  set_fact:
    max_exp_id: "{{ '0' if state_dirs_found.matched == 0 else (state_dirs_found \
                    | json_query('files[*].path') \
                    | map('split', '_') \
                    | list \
                    | map('last') \
                    | list \
                    | sort \
                    | last ) }}"

- name: Select the experiment state with the highest `exp_id` (i.e., the most recent)
  set_fact:
    exp_id: "{{ max_exp_id }}"
  when: id == 'last' and redefine_exp_id # continue the last experiment run

- name: Create new exp id + Mark as init
  set_fact:
    is_init: True
    exp_id: "{{ (max_exp_id | int) + 1 }}"
  when: id == 'new' and redefine_exp_id and expstate == 'load'  # init experiment

- debug:
    msg: "exp_name={{ exp_name }} exp_id={{ exp_id }}"

- name: Reset experiment state to []
  set_fact:
    exp_runs_ext: []
    exp_job_ids: []
    exp_job_ids_unfinished: []
    exp_job_ids_pending: []
    exp_job_ids_running: []
  when: is_init

- name: Init the experiment state by expanding the `experiment.base_experiment.host_vars` with the varying params in the experiments
  set_fact:
    exp_runs_ext: "{{ exp_runs_ext \
                      | union([experiment.base_experiment.host_vars \
                      | combine( exp_item, recursive=True ) \
                      | combine({ '~FACTORS_LEVEL': { 'args': exp_item } }) ])}}"
  loop: "{{ experiment.factor_levels }}"
  when: is_init
  loop_control:
    loop_var: exp_item

- assert:
    that:
    - not '$FACTOR$' in (exp_runs_ext | string)
    fail_msg: "missing level for at least one factor in the experiment config (i.e., not all '$FACTOR$' are replaced)"
  when: is_init

- name: Create exp directory if it does not exist
  delegate_to: localhost
  file:
    path: "{{ local.exp_state_dir }}/{{ exp_suite }}_{{ exp_name }}_{{ exp_id }}"
    state: directory
    mode:  0755
  when: is_init

- name: Save the Experiment State in the Run Directory
  delegate_to: localhost
  template:
    src: state.yml.j2
    dest: "{{ local.exp_state_dir }}/{{ exp_suite }}_{{ exp_name }}_{{ exp_id }}/state.yml"
    mode:  0755
  when: expstate == 'save' or is_init

- name: Load Experiment State
  include_vars: # Be careful: any variables you set with set_fact will not be overwritten with include_vars due to the variable precedence of different sources in Ansible.
    file: "{{ local.exp_state_dir }}/{{ exp_suite }}_{{ exp_name }}_{{ exp_id }}/state.yml"
    name: state

- name: Set variables (facts) based on loaded state
  set_fact:
    exp_facts: "{{ exp_facts | default({}) | combine({ exp_name: { fact_item.key : fact_item.value } }, recursive=True) }}"
  with_items:
    - { 'key': 'exp_runs_ext', 'value': "{{ state.exp_runs_ext }}" }
    - { 'key': 'exp_job_ids', 'value': "{{ state.exp_job_ids }}" }
    - { 'key': 'exp_job_ids_unfinished', 'value': "{{ state.exp_job_ids_unfinished }}" }
    - { 'key': 'exp_job_ids_pending', 'value': "{{ state.exp_job_ids_pending }}" }
    - { 'key': 'exp_job_ids_running', 'value': "{{ state.exp_job_ids_running }}" }
    - { 'key': 'n_repetitions', 'value': "{{ state.n_repetitions }}" }
  loop_control:
    loop_var: fact_item
