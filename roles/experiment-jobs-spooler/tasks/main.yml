---

- assert:
    that:
    - exp_name is defined
    - exp_id is defined
    - exp_job_ids is defined
    - exp_job_ids_pending is defined
    - exp_job_ids_running is defined
    - exp_runs_ext is defined
    - exp_id is defined
    - exp_check_wait_time is defined

- set_fact:
    is_start_jobs: "{{ exp_job_ids_pending | list | length > 0 }}"

- name: Check if no unfinished jobs -> end role (play)
  meta: end_play
  when: exp_job_ids_unfinished | length == 0

- name: reset job_host_assignment, exp_jobs, and exp_job_ids_tuple
  set_fact:
    job_host_assignment: {}
    exp_job_ids_tuple: []
    exp_jobs: []

- name: Build Assignment from 
  set_fact:
    job_host_assignment: "{{ job_host_assignment | default({}) | combine({job_id: {'host': single_host, 'host_type': 'single', 'idx': '0'}}) }}"
  vars:
    single_host: "{{ groups[exp_client.host_group] | default([]) | union(groups[exp_server.host_group] |default([])) | first }}"
  loop: "{{ exp_job_ids }}"
  loop_control:
    loop_var: job_id

- debug:
    var: job_host_assignment

- set_fact:
    remote_hosts: "{{ job_host_assignment | dict2items | map(attribute='value') | map(attribute='host') | unique | list }}"


###################################################################
#  Create a list that contains all info for a job                 #
###################################################################


- name: Extract run id and rep from list of job ids
  set_fact:
    exp_job_ids_tuple: "{{ exp_job_ids_tuple | default([]) + [{'job_id': job_id, 'exp_run': job_id | string | split('_')| first | int, 'exp_run_rep': job_id | string | split('_')| last | int }] }}" 
  loop: "{{ exp_job_ids_pending }}"
  loop_control:
    loop_var: job_id
  when: is_start_jobs


- name: Build a Job List with all Required information
  set_fact:
    exp_jobs: "{{ exp_jobs | default([]) + [ 
      {
        'host_info': job_host_assignment[job.job_id],
        'exp_name': exp_name,
        'exp_id': exp_id,
        'job_id': job.job_id,
        'exp_run': job.exp_run,
        'exp_run_rep': job.exp_run_rep,
        'exp_working_dir': remote.dir + '/results/exp_' + exp_name + '_' + exp_id | string + '/run_' + job.exp_run | string + '/rep_' + job.exp_run_rep | string,
        'exp_run_config': exp_runs_ext[job.exp_run|int]
      }
     ] | list}}"
  loop: "{{ exp_job_ids_tuple }}"
  loop_control:
    loop_var: job
    index_var: idx
  when: is_start_jobs

- debug:
    var: exp_jobs
  when: is_start_jobs


###################################################################
#  Prepare Experiment Environment (directories, files, ...)       #
###################################################################

# TODO [nku] think about how to unify this with sequential approach (should not be done separately)

# TODO [nku] possible to run async?
- name: Create results directory
  ansible.builtin.file:
    path: "{{ job.exp_working_dir }}/results"
    state: directory
    mode: 0755
    group: ubuntu
    owner: ubuntu
  delegate_to: "{{ job.host_info.host }}"
  loop: "{{ exp_jobs }}"
  loop_control:
    loop_var: job
  when: is_start_jobs

- name: Create scratch directory
  ansible.builtin.file:
    path: "{{ job.exp_working_dir }}/scratch"
    state: directory
    mode: 0755
    group: ubuntu
    owner: ubuntu
  delegate_to: "{{ job.host_info.host }}"
  loop: "{{ exp_jobs }}"
  loop_control:
    loop_var: job
  when: is_start_jobs

- name: Create run config file in working directory
  template:
    src: config.json.j2
    dest: "{{ job.exp_working_dir }}/config.json"
    mode: 0755
  delegate_to: "{{ job.host_info.host }}"
  loop: "{{ exp_jobs }}"
  loop_control:
    loop_var: job
  when: is_start_jobs


###################################################################
#  Enqueue all Jobs                                               #
###################################################################

# TODO [nku] ensure to empty queue for is_start_jobs

- name: clear finished jobs from queue
  ansible.builtin.command:
    cmd: tsp -C
  delegate_to: "{{ host }}"
  loop: "{{ remote_hosts }}"
  loop_control:
    loop_var: host
  when: is_start_jobs


# TODO [nku] could rewrite as idempotent module (schedule only if label is not present or something like that)
- name:
  ansible.builtin.command:
    cmd: tsp -L {{ job.exp_name}}_{{ job.exp_id }}_{{ job.job_id }} /bin/sh -c 'cd {{ job.exp_working_dir }} &&  ({{ job.exp_run_config['$CMD$'] }} | tee results/stdout.log) 3>&1 1>&2 2>&3 | tee results/stderr.log'
  delegate_to: "{{ job.host_info.host }}"
  loop: "{{ exp_jobs }}"
  loop_control:
    loop_var: job
  when: is_start_jobs

- name: Update experiment state
  set_fact:
    exp_job_ids_queued: "{{ exp_job_ids_pending }}" # all that were pending are now queued
    exp_job_ids_pending: [] # pending is now empty
  when: is_start_jobs


- debug:
    var: exp_job_ids_pending

###################################################################
#  Wait and the Get Status of All Job                             #
###################################################################

- name: Sleep for X seconds before checking job status
  wait_for:
    timeout: "{{ exp_check_wait_time }}"
  when:
  - exp_check_wait_time > 0

- name: Get Status of all Jobs
  ansible.builtin.command:
    cmd: tsp
  delegate_to: "{{ host }}"
  loop: "{{ remote_hosts }}"
  loop_control:
    loop_var: host
  register: tsp_result


- name: Extract information from tsp responses
  set_fact: 
    regex_matches: "{{ tsp_result | json_query(query) | flatten | 
                        map('regex_search', '([0-9]+)\\s+(queued|running|finished)\\s+[^\\[]+\\[([^_]+)_([0-9]+)_([0-9]+)_([0-9]+)\\].+', '\\1', '\\2', '\\3', '\\4', '\\5', '\\6') }}"
  vars:
    query: 'results[*].stdout_lines[1:]'


- name: reset tsp entries
  set_fact:
    tsp_entries: [] 

- set_fact:
    tsp_entries: "{{ tsp_entries | default([]) | list + [{
      'tsp_id': match.0, 
      'tsp_status': match.1, 
      'exp_name': match.2,
      'exp_id': match.3,
      'exp_run': match.4,
      'exp_run_rep': match.5,
      'job_id': match.4 + '_' + match.5,
      'host_info': job_host_assignment[match.4 + '_' + match.5]
      }] | list }}"
  loop: "{{ regex_matches }}"
  loop_control:
    loop_var: match

- debug:
    var: tsp_entries


- name: filter tsp_entries to only consider jobs of current exp_name and exp_id
  set_fact:
    tsp_entries: "{{ tsp_entries | list | selectattr('exp_name', 'equalto', exp_name) | selectattr('exp_id', 'equalto', exp_id) | list }}"


- set_fact:
    tsp_entries_running: "{{ tsp_entries | list | selectattr('tsp_status', 'equalto', 'running') | list }}"
    tsp_entries_finished: "{{ tsp_entries | list | selectattr('tsp_status', 'equalto', 'finished') | list }}"
    tsp_entries_queued: "{{ tsp_entries | list | selectattr('tsp_status', 'equalto', 'queued') | list }}"

- set_fact:
    # ignore jobs already marked as finished in experiment state
    tsp_entries_newly_finished: "{{ tsp_entries_finished | list | rejectattr('job_id', 'in', exp_job_ids_finished | list) }}"


#- debug:
#    var: tsp_entries_running
#
#- debug:
#    var: tsp_entries_queued
#
#- debug:
#    var: tsp_entries_finished
#
#- debug:
#    var: tsp_entries_newly_finished


- name: Download results for finished jobs
  include_role:
    name: experiment-job-result
  vars:
    remote_hosts: "{{ [ entry.host_info] }}"
    # TODO [nku] could extract working dir etc. as a filter such that it is defined in a single place
    remote_config_file: "{{ remote.dir }}/results/exp_{{ entry.exp_name }}_{{ entry.exp_id }}/run_{{ entry.exp_run }}/rep_{{ entry.exp_run_rep }}/config.json"
    remote_results_dir: "{{ remote.dir }}/results/exp_{{ entry.exp_name }}_{{ entry.exp_id }}/run_{{ entry.exp_run }}/rep_{{ entry.exp_run_rep }}/results"
    local_results_dir: results/exp_{{ entry.exp_name }}_{{ entry.exp_id }}/run_{{ entry.exp_run }}/rep_{{ entry.exp_run_rep }}
  loop: "{{ tsp_entries_newly_finished }}"
  loop_control:
    loop_var: entry

- name: Remove finished jobs with downloaded results from queue
  ansible.builtin.command:
    cmd: tsp -r {{ entry.tsp_id }}
  delegate_to: "{{ entry.host_info.host }}"
  loop: "{{ tsp_entries_finished }}"
  loop_control:
    loop_var: entry


- name: update experiment state based on the task spooler status 
  set_fact:
    exp_job_ids_queued: "{{ tsp_entries_queued | list | map(attribute='job_id') | list }}"
    exp_job_ids_running: "{{ tsp_entries_running | list | map(attribute='job_id') | list }}"
    exp_job_ids_finished: "{{ exp_job_ids_finished | list + tsp_entries_newly_finished | map(attribute='job_id') | list }}"

- name:
  set_fact:
    exp_job_ids_unfinished: "{{ exp_job_ids_queued | list + exp_job_ids_running | list}}"

- name: Save the updated state of the experiment run (save job ids)
  include_role:
    name: experiment-state
  vars:
    expstate: save

