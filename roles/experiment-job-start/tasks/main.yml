---

- assert:
    that:
    - exp_working_dir is defined
    - exp_code_dir is defined
    - exp_run_config is defined
    - exp_id is defined
    - running_job_id is defined


- debug:
    var: exp_run_config

##########################################################################
#   Setup Service Unit Files                                             #
##########################################################################

- name: Provide connection information
  set_fact:
    host_ips: "{{ host_ips \
                  | default({}) \
                  | combine({ \
                    item_group_name: [item_ip] \
                  }, recursive=True) \
               }}"
  vars:
    item_hostvars: "{{ hostvars[host] }}"
    item_group_name: "{{ hostvars[host]['host_group_name'] }}"
    item_ip: "{{ hostvars[host]['private_ip_address'] }}"
  loop: "{{ groups[host_group_name_long] }}"
  loop_control:
    loop_var: host

- name: "Create unit file for servers of group '{{ host_group_name }}' for experiment '{{ exp_name }}'"
  become: yes
  template:
    src: "{{ host_group_name }}.service.j2"
    dest: "/lib/systemd/system/{{ host_group_name_long }}.service"
    mode: 644
  delegate_to: "{{ host }}"
  loop: "{{ groups[host_group_name_long] }}"
  loop_control:
    loop_var: host
  notify:
    - reload systemctl

- name: Create config file
  template:
    src: config.json.j2
    dest: "{{ exp_working_dir }}/config.json"
    mode: 0755
  delegate_to: "{{ host }}"
  loop: "{{ groups[host_group_name_long] }}"
  loop_control:
    loop_var: host
  notify:
    - reload systemctl



##########################################################################
#   Starting the Experiment                                              #
##########################################################################

# TODO: the client must be robust against a not-available server, there is no sleep
# in between the roles anymore.
- name: Start services
  become: yes
  delegate_to: "{{ host }}"

  service:
    name: "{{ host_group_name_long }}.service"
    state: restarted
    enabled: yes
  loop: "{{ groups[host_group_name_long] }}"
  loop_control:
    loop_var: host
