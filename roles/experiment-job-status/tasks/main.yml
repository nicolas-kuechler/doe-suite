---

#
# Experiment status checking
#

- name: Check the job status (`n_check` in the experiment config YAML controls how many hosts are checked)
  include_tasks:
    file: get_status.yml
  # there are some unfinished jobs left
  when: (exp_fact.exp_job_ids_unfinished | length) > 0 and (host_group_idx | int) < (n_check | int)

#
# Experiment result gathering
#

# Create local directory and fetch results
- name: Fetch the results
  include_tasks:
    file: fetch_results.yml
  vars:
    remote_results_dir: "{{ exp_working_dir }}/results"
    local_results_dir: "results/{{ exp_suite }}/{{ exp_name }}_{{ exp_id }}/\
                        run_{{ exp_run }}/rep_{{ exp_run_rep }}"

- block:
  #
  # Update experiment state
  #
  - name: Update the job ids list (remove experiment from running)
    set_fact:
      exp_runs_ext: "{{ exp_fact.exp_runs_ext }}"
      exp_job_ids: "{{ exp_fact.exp_job_ids }}"
      exp_job_ids_unfinished: "{{ exp_fact.exp_job_ids_pending }}"
      exp_job_ids_pending: "{{ exp_fact.exp_job_ids_pending }}"
      exp_job_ids_running: []

  - name: Save the updated state of the experiment run (save job ids)
    include_role:
      name: experiment-state
    vars:
      expstate: save
      redefine_exp_id: "{{ False }}"

  #
  # Run next job
  #
  - name: Run the next job
    include_role:
      name: experiment-job

  delegate_to: localhost
  delegate_facts: true

- name: Update the server's exp_facts to the latest state
  set_fact:
    exp_fact: "{{ hostvars['localhost'].exp_fact }}"
