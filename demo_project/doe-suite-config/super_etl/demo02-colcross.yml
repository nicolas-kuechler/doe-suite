
# SUPER ETL demo file.
# More details can be found in `docs/etl.md`
#
# Super ETL also supports multiple outputs from different suites can be combined here, but this file does not demo that functionality.

$SUITE_ID$:
  example08-superetl: $expected #00000001 # SUITE ID

  # ... if more suites exist, other ids

$ETL$:
  data:
    experiments:
      example08-superetl: "*"

    extractors:
      YamlExtractor: {} # with default file_regex
      ErrorExtractor: {} # if a non-empty file exists matching the default regex -> then we throw an error using the ErrorExtractor
      IgnoreExtractor: {} # since we want that each file is processed by an extractor, we provide the IgnoreExtractor which can be used to ignore certain files. (e.g., stdout)
    transformers:
    - name: GroupByAggTransformer
      data_columns: [base_s, overhead1_s, overhead2_s, base_mb, overhead_mb]
      groupby_columns: [system, system_config, workload]
      agg_functions: ["mean", "std"]
    loaders:
      CsvSummaryLoader: {}

  minimal:
    experiments:
      example08-superetl: "*"
    extractors:
      $INCLUDE_STEPS$:  [{config: demo02-colcross, pipeline: data}]
    transformers:
    - $INCLUDE_STEPS$:  {config: demo02-colcross, pipeline: data}
    loaders:

      ColumnCrossPlotLoader:
        # define a single metric (time is in `base_s_mean` column of the df)
        metrics:
          time: {value_cols: [base_s_mean], unit_label: sec}

        # build the config for each subplot (i.e., ax) in a cumulative fashion
        #   here we only use a single (unconditional) config and so this directly corresponds to the cumulative config
        #   however, it's possible to have multiple entries in the list and based on a `jp_query` (JMESPath) to construct different subplot
        cum_subplot_config:
        - chart:
            # a barchart, with a bar for each combination of system, system_config, and workload appearing in the df
            bar_foreach:
              cols: [system, system_config, workload]
              label: {template: "{system}\n{system_config}\n{workload}"} # label below each bar
          #cum_artist_config:
          #- label: {template: "{system}-{system_config}-{workload}"}
          yaxis:
            label: {template: "{$metrics$} [{$metric_unit$}]"} # y axis label -> resolves to `time [sec]` because the metric is called `time` and it defines a `unit_label`: `sec`
          xaxis:
            tick_params: {axis: x, labelsize: 7}

          # every label appearing on the plot, will be fed through the label_map to be able to rename it into a display friendly format
          label_map: {system1: s1, system2: s2, system3: s3, workload1: w1, workload2: w2, workload3: w3}

  custom:
    experiments:
      example08-superetl: "*"
    extractors:
      $INCLUDE_STEPS$:  [{config: demo02-colcross, pipeline: data}]
    transformers:
    - $INCLUDE_STEPS$:  {config: demo02-colcross, pipeline: data}
    loaders:

      # NOTE: The MyCustomColumnCrossPlotLoader is a project-specific extension defined in: `demo_project/doe-suite-config/does_etl_custom/etl/plots/colcross.py`
      #        -> it adds a new configuration option: "watermark" and has custom code that will display the watermark over the ax object
      MyCustomColumnCrossPlotLoader:
        # define a single metric (time is in `base_s_mean` column of the df)
        metrics:
          time: {value_cols: [base_s_mean], unit_label: sec}

        # build the config for each subplot (i.e., ax) in a cumulative fashion
        #   here we only use a single (unconditional) config and so this directly corresponds to the cumulative config
        #   however, it's possible to have multiple entries in the list and based on a `jp_query` (JMESPath) to construct different subplot
        cum_subplot_config:
        - chart:
            # a barchart, with a bar for each combination of system, system_config, and workload appearing in the df
            bar_foreach:
              cols: [system, system_config, workload]
              label: {template: "{system}\n{system_config}\n{workload}"} # label below each bar
          yaxis:
            label: {template: "{$metrics$} [{$metric_unit$}]"} # y axis label -> resolves to `time [sec]` because the metric is called `time` and it defines a `unit_label`: `sec`
          xaxis:
            tick_params: {axis: x, labelsize: 7}

          # NOTE: newly added field in extended loader
          watermark: IN PROGRESS

          # every label appearing on the plot, will be fed through the label_map to be able to rename it into a display friendly format
          label_map: {system1: s1, system2: s2, system3: s3, workload1: w1, workload2: w2, workload3: w3}

  minimal_box:
    experiments:
      example08-superetl: "*"
    extractors:
      $INCLUDE_STEPS$:  [{config: demo02-colcross, pipeline: data}]
    transformers: [] # no group by here
    loaders:

      ColumnCrossPlotLoader:
        # define a single metric (time is in `base_s_mean` column of the df)
        metrics:
          time: {value_cols: [base_s], unit_label: sec}

        # build the config for each subplot (i.e., ax) in a cumulative fashion
        #   here we only use a single (unconditional) config and so this directly corresponds to the cumulative config
        #   however, it's possible to have multiple entries in the list and based on a `jp_query` (JMESPath) to construct different subplot
        cum_subplot_config:
        - chart:
            box_padding: 0.2
            group_padding: 0.8

            group_foreach:
              cols: [system]
            # a barchart, with a bar for each combination of system, system_config, and workload appearing in the df
            box_foreach:
              cols: [system_config, workload]
              label: {template: "{system}\n{system_config}\n{workload}"} # label below each bar
          #cum_artist_config:
          #- label: {template: "{system}-{system_config}-{workload}"}
          yaxis:
            label: {template: "{$metrics$} [{$metric_unit$}]"} # y axis label -> resolves to `time [sec]` because the metric is called `time` and it defines a `unit_label`: `sec`
          xaxis:
            tick_params: {axis: x, labelsize: 7}
          #legend_ax_kwargs: {}

          # every label appearing on the plot, will be fed through the label_map to be able to rename it into a display friendly format
          label_map: {system1: s1, system2: s2, system3: s3, workload1: w1, workload2: w2, workload3: w3}


  grid:
    experiments:
      example08-superetl: "*"
    extractors:
      $INCLUDE_STEPS$:  [{config: demo02-colcross, pipeline: data}]
    transformers:
    - $INCLUDE_STEPS$:  {config: demo02-colcross, pipeline: data}
    loaders:
      ColumnCrossPlotLoader:
        data_filter:
          allowed:
            system: [system1, system2, system3]
            system_config: [v1, v2]
            workload: [workload1, workload2]
        #fig_foreach:
        #  cols: [$metrics$] # $metrics$
        #  # jp_except...

        subplot_grid:
          rows: [$metrics$]
          cols: [system]   #$metrics$
          #share_y: none
          share_x: none
          kwargs:
            constrained_layout: True
          # jp_except: "(orient == 'W') || (orient == 'E')"


        # define metrics (select the data columns)
        metrics:
          time:
            value_cols: [base_s_mean, overhead1_s_mean, overhead2_s_mean]
            error_cols: [base_s_std, overhead1_s_std, overhead2_s_std]
            #value_divider: 1.0
            #value_multiplier: 1.0
            unit_label: sec

          memory:
            value_cols: [base_mb_mean, overhead_mb_mean]
            error_cols: [base_mb_std, overhead_mb_std]
            #value_divider: 1.0
            #value_multiplier: 1.0
            unit_label: MB

        ########## Configure each Subplot:

        cum_subplot_config:

        - jp_query: (subplot_col_idx == `0`)
          legend_ax: {}
          yaxis:
            label: {template: "{$metrics$} [{$metric_unit$}]"}
            major_formatter: round_short

        - jp_query: (subplot_row_idx == `0`)
          ax_title: {template: "System: {system}"}

        - xaxis:
            tick_params:
            - {axis: x, which: both, labelsize: 8}
            - {axis: x, which: major, pad: 10}

          chart:
            group_padding: 0.5
            group_foreach:
              cols: [system_config]
              label: {template: "{system_config}"}

            bar_foreach:
              cols: [workload]
              #jp_except:  "(to_number(y) == `5`)"
              label: {template: "{workload}"}
            #part_foreach:
            #  cols: [run]

          ###### Configure each element (artist) in subfigure (ax)
          cum_artist_config:
          - label: {template: "{value_col}"}
          - color: orange
            jp_query: starts_with(value_col, 'overhead2')
          - color: red
            jp_query: starts_with(value_col, 'overhead')
          - color: green
            jp_query: starts_with(value_col, 'base')

          label_map:
            system1: s1
            system2: s2
            system3: s3
            workload1: wl1
            workload2: wl2
            workload3: wl3
            memory: Memory
            time: Time

            base_mb_mean: base
            overhead_mb_mean: overhead

            base_s_mean: base
            overhead1_s_mean: overhead1
            overhead2_s_mean: overhead2
