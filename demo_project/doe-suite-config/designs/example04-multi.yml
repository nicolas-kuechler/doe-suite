---

# Example Goal - Demonstrate:
#  (1) an experiment involving multiple instances (e.g., client-server)
#  (2) that `common_roles` lists roles executed on all host_types, while `init_roles` is a host_type specific role.
#  (3) the use of the variable `exp_host_lst` in $CMD$ to get the dns name of of other instances (e.g., get dns name of server)
#  (4) the use of `check_status`, to control when an experiment job is considered to be over.
#     If set to `True`, then the experiment job waits until the $CMD$ stops. default(True)

# client server message where each client sends the server a message
exp_client_server:
  n_repetitions: 3
  common_roles:
    - setup-common # (2) role executed on all host types
  host_types:
    client: # (1)
      n: 2
      check_status: True # (4) when each client, sent a message, then the experiment job is complete
      init_roles: setup-client # (2) role executed only on client
      $CMD$:
        # send messages to the server with nc
        # (3) use exp_host_lst variable to extract ip address from server, the delay `sleep 5` ensures that the server is running when the client sends the message
        # to_private_dns_name is a custom filter function defined in designs/filter_plugins
        - sleep 5 && echo '[% my_run.host_vars.client.msg %] from client 1 ([% my_run.info %])' | netcat -q 1 [% exp_host_lst | to_private_dns_name('server') | default('<UNDEFINED-DNS>') %] [% my_run.port %]
        # have two commands to distinguish messages from client 1 and 2
        - sleep 5 && echo '[% my_run.host_vars.client.msg %] from client 2 ([% my_run.info %])' | netcat -q 1 [% exp_host_lst | to_private_dns_name('server') | default('<UNDEFINED-DNS>') %] [% my_run.port %]

    server: # (1)
      n: 1
      check_status: False # (4) the server does not stop (does not know when the experiment job is over)
      init_roles: setup-server # (2) role executed only on server
      # run a single ncat server -> writes all incoming messages to stdout
      $CMD$: ncat -l [% my_run.port %] --keep-open

  base_experiment:
    port: 2807
    info: $FACTOR$
    host_vars:
      client:
        msg: $FACTOR$
      server:
        greeting: ignore

  factor_levels:
    - info: run 0
      host_vars:
        client:
          msg: hello server
    - info: run 1
      host_vars:
        client:
          msg: hi server
    - info: run 2
      host_vars:
        client:
          msg:  good day server

$ETL$:
  check_error: # ensures that stderr.log is empty everywhere and that no files are generated except stdout.log
    experiments: "*"
    extractors: {ErrorExtractor: {}, IgnoreExtractor: {} }