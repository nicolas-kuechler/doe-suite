---

# Goal: Show complex experiments: mix of formats, multiple experiments, running different commands on different instances

# Example Goal - Show a more complex set of experiments that demonstrates:
#  (1) a mix of single instance experiments and multi instance experiments
#  (2) a mix of design formats (`cross`and `level-list`)
#  (3) running different commands on different instances of the same host_type
#  (4) write a results file (csv)

# Suite with 3 experiments:
# - exp1: experiment on single instance
# - exp2: experiment on multiple instances (client server)
# - exp3: experiment on multiple instances

# experiment on a single instance that writes an output file
exp_single:
  n_repetitions: 2
  common_roles:
    - setup-common
  host_types:
    small:
      n: 1
      init_roles: setup-small
      $CMD$: "echo \"[% my_run.info %];[% my_run.seed %];[% my_run.opt%]\" >> results/out.csv" # (4) write to output file

  base_experiment:
    info: $FACTOR$
    seed: 1234
    opt: $FACTOR$

  factor_levels:
    - info: run1 - with optimization
      opt: True
    - info: run2 - without optimization
      opt: False


# client server experiment (clients send msg to server)
exp_multi_1:
  n_repetitions: 3
  common_roles:
    - setup-common
  host_types:
    client:
      n: 3
      $CMD$: # (3) run a different command on each client instance -> at the moment can only run one command (main) per instance, later support will be added for multiple commands per instance (e.g., run some monitoring service)
        # send messages to the server with nc
        # use exp_host_lst variable to extract ip address from server, the delay `sleep 5` ensures that the server is running when the client sends the message
        - main: sleep 5 && echo '[% my_run.host_vars.client.msg %] from client 1' | netcat -q 1 [% exp_host_lst | json_query('[?host_type==`server`].private_dns_name') | default(['<UNDEFINED-DNS>'], true) | first %] [% my_run.port %]
        # have three commands to distinguish messages from client 1, 2, and 3
        - main: sleep 5 && echo '[% my_run.host_vars.client.msg %] from client 2' | netcat -q 1 [% exp_host_lst | json_query('[?host_type==`server`].private_dns_name') | default(['<UNDEFINED-DNS>'], true) | first %] [% my_run.port %]
        - main: sleep 5 && echo '[% my_run.host_vars.client.msg %] from client 3' | netcat -q 1 [% exp_host_lst | json_query('[?host_type==`server`].private_dns_name') | default(['<UNDEFINED-DNS>'], true) | first %] [% my_run.port %]

    server:
      n: 1
      check_status: False
      init_roles: setup-server
      # run a single ncat server -> writes all incoming messages to stdout
      $CMD$: ncat -l [% my_run.port %] --keep-open

  base_experiment:
    port: 2807
    host_vars:
      client:
        msg:
          $FACTOR$: [hello server, hi server, good day server]


# experiment that runs the same command on two instances
exp_multi_2:
  n_repetitions: 2
  common_roles:
    - setup-common
  host_types:
    small:
      n: 2
      $CMD$: "echo \"[% my_run.prefix %] [% my_run.n_parties %] [% my_run.postfix %]\" "

  base_experiment:
    n_parties:
      $FACTOR$: [100, 200, 300, 500]
    prefix: $FACTOR$
    postfix: $FACTOR$
  factor_levels:
    - prefix: hi
      postfix: parties
    - prefix: hello
      postfix: people
  # results in 8 runs * 2 reps = 16 jobs
    # - echo hi 100 parties
    # - echo hi 200 parties
    # - echo hi 300 parties
    # - echo hi 500 parties
    # - echo hello 100 people
    # - echo hello 200 people
    # - echo hello 300 people
    # - echo hello 500 people


$ETL$:
  check_error: # ensures that stderr.log is empty everywhere and that no files are generated except stdout.log
    experiments: "*"
    extractors: {ErrorExtractor: {}, IgnoreExtractor: {file_regex: ["stdout.log", "out.csv"]} }